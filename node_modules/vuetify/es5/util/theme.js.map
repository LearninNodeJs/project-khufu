{"version":3,"file":"theme.js","sourceRoot":"","sources":["../../src/util/theme.js"],"names":[],"mappings":"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","sourcesContent":["import { colorToInt, intToHex } from './colorUtils'\nimport * as sRGB from './color/transformSRGB'\nimport * as LAB from './color/transformCIELAB'\n\n/**\n * @param {object} theme\n * @returns {object}\n */\nexport function parse (theme) {\n  const colors = Object.keys(theme)\n  const parsedTheme = {}\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i]\n    const value = theme[name]\n\n    parsedTheme[name] = colorToInt(value)\n  }\n\n  return parsedTheme\n}\n\nexport function genVariations (name, value) {\n  const values = Array(10)\n  values[0] = genBaseColor(name, value)\n\n  for (let i = 1, n = 5; i <= 5; ++i, --n) {\n    values[i] = genVariantColor(name, lighten(value, n), 'lighten', n)\n  }\n\n  for (let i = 1; i <= 4; ++i) {\n    values[i + 5] = genVariantColor(name, darken(value, i), 'darken', i)\n  }\n\n  return values\n}\n\nfunction lighten (value, amount) {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] + amount * 10\n  return sRGB.fromXYZ(LAB.toXYZ(lab))\n}\n\nfunction darken (value, amount) {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] - amount * 10\n  return sRGB.fromXYZ(LAB.toXYZ(lab))\n}\n\n/**\n * Generate the CSS for a base color (.primary)\n *\n * @param {string} name - The color name\n * @param {string|number} value - The color value\n * @returns {string}\n */\nexport const genBaseColor = (name, value) => {\n  value = intToHex(value)\n  return `\n.${name} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.${name}--text {\n  color: ${value} !important;\n}\n.${name}--text input,\n.${name}--text textarea {\n  caret-color: ${value} !important;\n}`\n}\n\n/**\n * Generate the CSS for a variant color (.primary.darken-2)\n *\n * @param {string} name - The color name\n * @param {string|number} value - The color value\n * @param {string} type - The variant type (darken/lighten)\n * @param {number} n - The darken/lighten step number\n * @returns {string}\n */\nexport const genVariantColor = (name, value, type, n) => {\n  value = intToHex(value)\n  return `\n.${name}.${type}-${n} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.${name}--text.text--${type}-${n} {\n  color: ${value} !important;\n}\n.${name}--text.text--${type}-${n} input,\n.${name}--text.text--${type}-${n} textarea {\n  caret-color: ${value} !important;\n}`\n}\n"]}