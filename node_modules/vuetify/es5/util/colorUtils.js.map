{"version":3,"file":"colorUtils.js","sourceRoot":"","sources":["../../src/util/colorUtils.js"],"names":[],"mappings":";;;;;;;;AAAA,AAAO,AAAE,AAAW,AAAE,AAAM,AAAW;;AAEvC,AAGG,AACH,AAAM;;;;oBAAsB,AAAK;AAC/B,QAAI,AAAG;AAEP,QAAI,OAAO,AAAK,UAAK,AAAQ,UAAE;AAC7B,AAAG,cAAG,AAAK;AACZ,eAAU,OAAO,AAAK,UAAK,AAAQ,UAAE;AACpC,YAAI,AAAC,IAAG,AAAK,MAAC,AAAC,AAAC,OAAK,AAAG,AAAC,AAAC,MAAC,AAAK,MAAC,AAAS,UAAC,AAAC,AAAC,AAAC,AAAC,KAAC,AAAK;AACrD,YAAI,AAAC,EAAC,AAAM,WAAK,AAAC,GAAE;AAClB,AAAC,kBAAK,AAAK,MAAC,AAAE,AAAC,IAAC,AAAG;AAAC,AAAI,AAAC,AAAE,uBAAC,AAAI,OAAG,AAAI,AAAC;aAApC,AAAC,EAAoC,AAAI,KAAC,AAAE,AAAC;AAClD;AACD,YAAI,AAAC,EAAC,AAAM,WAAK,AAAC,GAAE;AAClB,AAAW,AAAC,6CAAI,AAAK,AAA4B,AAAC;AACnD;AACD,AAAG,cAAG,AAAQ,SAAC,AAAC,GAAE,AAAE,AAAC;AACtB,KATM,MASA;AACL,cAAM,IAAI,AAAS,AAAC,+DAAmD,AAAK,MAAC,AAAW,YAAC,AAAI,AAAU,AAAC;AACzG;AAED,QAAI,AAAG,MAAG,AAAC,GAAE;AACX,AAAW,AAAC,oEAA+B,AAAK,AAAG,AAAC;AACpD,AAAG,cAAG,AAAC;AACR,WAAM,IAAI,AAAG,MAAG,AAAQ,YAAI,AAAK,MAAC,AAAG,AAAC,MAAE;AACvC,AAAW,AAAC,yCAAI,AAAK,AAA4B,AAAC;AAClD,AAAG,cAAG,AAAQ;AACf;AAED,WAAO,AAAG,AACZ;AAAC;AAED,AAGG,AACH,AAAM;;;;kBAAoB,AAAK;AAC7B,AAAK,YAAG,AAAK,MAAC,AAAQ,SAAC,AAAE,AAAC;AAE1B,QAAI,AAAK,MAAC,AAAM,SAAG,AAAC,GAAE,AAAK,QAAG,AAAG,IAAC,AAAM,OAAC,AAAC,IAAG,AAAK,MAAC,AAAM,AAAC,UAAG,AAAK;AAElE,WAAO,AAAG,MAAG,AAAK,AACpB;AAAC","sourcesContent":["import { consoleWarn } from './console'\n\n/**\n * @param {string|number} color\n * @returns {number}\n */\nexport function colorToInt (color) {\n  let rgb\n\n  if (typeof color === 'number') {\n    rgb = color\n  } else if (typeof color === 'string') {\n    let c = color[0] === '#' ? color.substring(1) : color\n    if (c.length === 3) {\n      c = c.split('').map(char => char + char).join('')\n    }\n    if (c.length !== 6) {\n      consoleWarn(`'${color}' is not a valid rgb color`)\n    }\n    rgb = parseInt(c, 16)\n  } else {\n    throw new TypeError(`Colors can only be numbers or strings, recieved ${color.constructor.name} instead`)\n  }\n\n  if (rgb < 0) {\n    consoleWarn(`Colors cannot be negative: '${color}'`)\n    rgb = 0\n  } else if (rgb > 0xffffff || isNaN(rgb)) {\n    consoleWarn(`'${color}' is not a valid rgb color`)\n    rgb = 0xffffff\n  }\n\n  return rgb\n}\n\n/**\n * @param {number} color\n * @returns {string}\n */\nexport function intToHex (color) {\n  color = color.toString(16)\n\n  if (color.length < 6) color = '0'.repeat(6 - color.length) + color\n\n  return '#' + color\n}\n"]}