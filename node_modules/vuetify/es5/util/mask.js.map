{"version":3,"file":"mask.js","sourceRoot":"","sources":["../../src/util/mask.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * Default delimiter RegExp\n *\n * @type {RegExp}\n */\nexport const defaultDelimiters = /[-!$%^&*()_+|~=`{}[\\]:\";'<>?,./\\\\ ]/\n\n/**\n *\n * @param {String} char\n *\n * @return {Boolean}\n */\nexport const isMaskDelimiter = char => char && defaultDelimiters.test(char)\n\n/**\n * Mask keys\n *\n * @type {Object}\n */\nconst allowedMasks = {\n  '#': {\n    test: char => char.match(/[0-9]/)\n  },\n  'A': {\n    test: char => char.match(/[A-Z]/i),\n    convert: char => char.toUpperCase()\n  },\n  'a': {\n    test: char => char.match(/[a-z]/i),\n    convert: char => char.toLowerCase()\n  },\n  'N': {\n    test: char => char.match(/[0-9A-Z]/i),\n    convert: char => char.toUpperCase()\n  },\n  'n': {\n    test: char => char.match(/[0-9a-z]/i),\n    convert: char => char.toLowerCase()\n  },\n  'X': {\n    test: isMaskDelimiter\n  }\n}\n\n/**\n * Is Character mask\n *\n * @param  {String} char\n *\n * @return {Boolean}\n */\nconst isMask = char => allowedMasks.hasOwnProperty(char)\n\n/**\n * Automatically convert char case\n *\n * @param  {String} mask\n * @param  {String} char\n *\n * @return {String}\n */\nconst convert = (mask, char) => {\n  return allowedMasks[mask].convert ? allowedMasks[mask].convert(char) : char\n}\n\n/**\n * Mask Validation\n *\n * @param  {String} mask\n * @param  {String} char\n *\n * @return {Boolean}\n */\nconst maskValidates = (mask, char) => {\n  if (char == null || !isMask(mask)) return false\n  return allowedMasks[mask].test(char)\n}\n\n/**\n * Mask Text\n *\n * Takes a string or an array of characters\n * and returns a masked string\n *\n * @param {*} text\n * @param {Array|String} masked\n * @param {Boolean} [dontFillMaskBlanks]\n *\n * @return {String}\n */\nexport const maskText = (text, masked, dontFillMaskBlanks) => {\n  if (text == null) return ''\n  text = String(text)\n  if (!masked.length || !text.length) return text\n  if (!Array.isArray(masked)) masked = masked.split('')\n\n  let textIndex = 0\n  let maskIndex = 0\n  let newText = ''\n\n  while (maskIndex < masked.length) {\n    const mask = masked[maskIndex]\n\n    // Assign the next character\n    const char = text[textIndex]\n\n    // Check if mask is delimiter\n    // and current char matches\n    if (!isMask(mask) && char === mask) {\n      newText += mask\n      textIndex++\n    // Check if not mask\n    } else if (!isMask(mask) && !dontFillMaskBlanks) {\n      newText += mask\n    // Check if is mask and validates\n    } else if (maskValidates(mask, char)) {\n      newText += convert(mask, char)\n      textIndex++\n    } else {\n      return newText\n    }\n\n    maskIndex++\n  }\n\n  return newText\n}\n\n/**\n * Unmask Text\n *\n * @param {String} text\n *\n * @return {String}\n */\nexport const unmaskText = text => {\n  return text ? String(text).replace(new RegExp(defaultDelimiters, 'g'), '') : text\n}\n"]}