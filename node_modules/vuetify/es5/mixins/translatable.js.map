{"version":3,"file":"translatable.js","sourceRoot":"","sources":["../../src/mixins/translatable.js"],"names":[],"mappings":";;;;;;AACE,AAAI,UAAE,AAAc;AAEpB,AAAI;AACF;AACE,AAAQ,sBAAE,AAAI;AACd,AAAY,0BAAE,AAAI;AAClB,AAAe,6BAAE,AAAI;AACrB,AAAS,uBAAE,AAAI;AACf,AAAY,0BAAE,AAAI;AAClB,AAAY,0BAAE,AAAI,AACnB,AACH;AARS;AAQR;;AAED,AAAQ;AACN,AAAgB;AACd,gBAAI,AAAI,KAAC,AAAS,WAAE;AAClB,uBAAO,AAAK,MAAC,AAAI,KAAC,AAAM,AAAC,AAAC,AAAC,UAAC,AAAI,KAAC,AAAM,AAAC,AAAC,AAAC,SAAG,AAAI,KAAC,AAAM,AAAI;AAC7D;AAED,mBAAO,AAAM,OAAC,AAAI,KAAC,AAAM,OAAC,AAAQ,AAAE,WAAC,AAAO,QAAC,AAAY,cAAE,AAAI,AAAC,AAAC,AACnE;AAAC;AAED,AAAS;AACP,mBAAO,AAAI,KAAC,AAAS,AAAE,AACzB;AAAC,AACF;AAZS;AAcV,AAAa;AACX,AAAM,eAAC,AAAmB,oBAAC,AAAQ,UAAE,AAAI,KAAC,AAAS,WAAE,AAAK,AAAC;AAC3D,AAAM,eAAC,AAAmB,oBAAC,AAAQ,UAAE,AAAI,KAAC,AAAS,WAAE,AAAK,AAAC,AAC7D;AAAC;;AAED,AAAO;AACL,AAAS;AACP,AAAM,mBAAC,AAAgB,iBAAC,AAAQ,UAAE,AAAI,KAAC,AAAS,WAAE,AAAK,AAAC;AACxD,AAAM,mBAAC,AAAgB,iBAAC,AAAQ,UAAE,AAAI,KAAC,AAAS,WAAE,AAAK,AAAC,AAC1D;AAAC;AAED,AAAS;AACP,AAAI,iBAAC,AAAc,AAAE;AAErB,AAAI,iBAAC,AAAe,AAAG,kBACrB,CAAC,AAAI,KAAC,AAAY,eAAG,AAAI,KAAC,AAAW,AAAC,AACtC,gBAAC,AAAI,KAAC,AAAgB,mBAAG,AAAI,KAAC,AAAY,AAAC,AAC5C;AAED,AAAI,iBAAC,AAAQ,WAAG,AAAI,KAAC,AAAK,MAAC,AAAI,KAAC,AAAY,eAAG,AAAI,KAAC,AAAe,AAAC;AAEpE,gBAAI,AAAI,KAAC,AAAU,YAAE;AACnB,AAAI,qBAAC,AAAU,AAAE;AAClB,AACH;AAAC;AAED,AAAc;AACZ,gBAAM,AAAM,SAAG,AAAI,KAAC,AAAG,IAAC,AAAqB,AAAE;AAE/C,AAAI,iBAAC,AAAS,YAAG,AAAM,OAAC,AAAW;AACnC,AAAI,iBAAC,AAAY,eAAG,AAAI,KAAC,AAAS,YAAG,AAAI,KAAC,AAAgB;AAC1D,AAAI,iBAAC,AAAW,cAAG,AAAM,OAAC,AAAG,MAAG,AAAI,KAAC,AAAS;AAC9C,AAAI,iBAAC,AAAY,eAAG,AAAM,OAAC,AAAW;AACtC,AAAI,iBAAC,AAAY,eAAG,AAAI,KAAC,AAAS,YAAG,AAAI,KAAC,AAAY,AACxD;AAAC,AACF,AACF;AA/BU;AAjCI","sourcesContent":["export default {\n  name: 'translatable',\n\n  data () {\n    return {\n      parallax: null,\n      parallaxDist: null,\n      percentScrolled: null,\n      scrollTop: null,\n      windowHeight: null,\n      windowBottom: null\n    }\n  },\n\n  computed: {\n    normalizedHeight () {\n      if (this.jumbotron) {\n        return isNaN(this.height) ? this.height : `${this.height}px`\n      }\n\n      return Number(this.height.toString().replace(/(^[0-9]*$)/, '$1'))\n    },\n\n    imgHeight () {\n      return this.objHeight()\n    }\n  },\n\n  beforeDestroy () {\n    window.removeEventListener('scroll', this.translate, false)\n    window.removeEventListener('resize', this.translate, false)\n  },\n\n  methods: {\n    listeners () {\n      window.addEventListener('scroll', this.translate, false)\n      window.addEventListener('resize', this.translate, false)\n    },\n\n    translate () {\n      this.calcDimensions()\n\n      this.percentScrolled = (\n        (this.windowBottom - this.elOffsetTop) /\n        (this.normalizedHeight + this.windowHeight)\n      )\n\n      this.parallax = Math.round(this.parallaxDist * this.percentScrolled)\n\n      if (this.translated) {\n        this.translated()\n      }\n    },\n\n    calcDimensions () {\n      const offset = this.$el.getBoundingClientRect()\n\n      this.scrollTop = window.pageYOffset\n      this.parallaxDist = this.imgHeight - this.normalizedHeight\n      this.elOffsetTop = offset.top + this.scrollTop\n      this.windowHeight = window.innerHeight\n      this.windowBottom = this.scrollTop + this.windowHeight\n    }\n  }\n}\n"]}