{"version":3,"file":"validatable.js","sourceRoot":"","sources":["../../src/mixins/validatable.js"],"names":[],"mappings":"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","sourcesContent":["\nimport { inject as RegistrableInject } from './registrable'\nimport { consoleError } from '../util/console'\n\n// Mixins\nimport Colorable from './colorable'\n\nexport default {\n  name: 'validatable',\n\n  mixins: [\n    Colorable,\n    RegistrableInject('form')\n  ],\n\n  data: () => ({\n    errorBucket: [],\n    hasColor: false,\n    hasFocused: false,\n    hasInput: false,\n    isResetting: false,\n    valid: false\n  }),\n\n  props: {\n    error: Boolean,\n    errorCount: {\n      type: [Number, String],\n      default: 1\n    },\n    errorMessages: {\n      type: [String, Array],\n      default: () => []\n    },\n    messages: {\n      type: [String, Array],\n      default: () => []\n    },\n    rules: {\n      type: Array,\n      default: () => []\n    },\n    success: Boolean,\n    successMessages: {\n      type: [String, Array],\n      default: () => []\n    },\n    validateOnBlur: Boolean\n  },\n\n  computed: {\n    hasError () {\n      return this.errorMessages.length > 0 ||\n        this.errorBucket.length > 0 ||\n        this.error\n    },\n    externalError () {\n      return this.errorMessages.length > 0 || this.error\n    },\n    // TODO: Add logic that allows the user to enable based\n    // upon a good validation\n    hasSuccess () {\n      return this.successMessages.length > 0 ||\n        this.success\n    },\n    hasMessages () {\n      return this.validations.length > 0\n    },\n    hasState () {\n      return this.shouldValidate && (this.hasError || this.hasSuccess)\n    },\n    shouldValidate () {\n      return this.externalError || (!this.isResetting && (\n        this.validateOnBlur\n          ? this.hasInput && this.hasFocused && !this.isFocused\n          : (this.hasInput || this.hasFocused)\n      ))\n    },\n    validations () {\n      return this.validationTarget.slice(0, this.errorCount)\n    },\n    validationState () {\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess && this.shouldValidate) return 'success'\n      if (this.hasColor) return this.color\n      return null\n    },\n    validationTarget () {\n      const target = this.errorMessages.length > 0\n        ? this.errorMessages\n        : this.successMessages.length > 0\n          ? this.successMessages\n          : this.messages\n\n      // String\n      if (!Array.isArray(target)) {\n        return [target]\n      // Array with items\n      } else if (target.length > 0) {\n        return target\n      // Currently has validation\n      } else if (this.shouldValidate) {\n        return this.errorBucket\n      } else {\n        return []\n      }\n    }\n  },\n\n  watch: {\n    rules: {\n      handler (newVal, oldVal) {\n        // TODO: This handler seems to trigger when input changes, even though\n        // rules array stays the same? Solved it like this for now\n        if (newVal.length === oldVal.length) return\n\n        this.validate()\n      },\n      deep: true\n    },\n    internalValue () {\n      // If it's the first time we're setting input,\n      // mark it with hasInput\n      this.hasInput = true\n      this.$nextTick(this.validate)\n    },\n    isFocused (val) {\n      if (!val) this.hasFocused = true\n      // If we're not focused, and it's the first time\n      // we're defocusing, set shouldValidate to true\n      if (!val && !this.hasFocused) {\n        this.$emit('update:error', this.errorBucket.length > 0)\n      }\n    },\n    isResetting () {\n      setTimeout(() => {\n        this.hasInput = false\n        this.hasFocused = false\n        this.isResetting = false\n      }, 0)\n    },\n    hasError (val) {\n      if (this.shouldValidate) {\n        this.$emit('update:error', val)\n      }\n    }\n  },\n\n  beforeMount () {\n    this.validate()\n  },\n\n  created () {\n    this.form && this.form.register(this)\n  },\n\n  beforeDestroy () {\n    this.form && this.form.unregister(this)\n  },\n\n  methods: {\n    reset () {\n      this.isResetting = true\n      this.internalValue = Array.isArray(this.internalValue)\n        ? []\n        : undefined\n    },\n    validate (force = false, value = this.internalValue) {\n      const errorBucket = []\n\n      if (force) this.hasInput = true\n\n      for (let index = 0; index < this.rules.length; index++) {\n        const rule = this.rules[index]\n        const valid = typeof rule === 'function' ? rule(value) : rule\n\n        if (valid === false || typeof valid === 'string') {\n          errorBucket.push(valid)\n        } else if (valid !== true) {\n          consoleError(`Rules should return a string or boolean, received '${typeof valid}' instead`, this)\n        }\n      }\n\n      this.errorBucket = errorBucket\n      this.valid = errorBucket.length === 0\n\n      return this.valid\n    }\n  }\n}\n"]}