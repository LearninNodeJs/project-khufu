{"version":3,"file":"button-group.js","sourceRoot":"","sources":["../../src/mixins/button-group.ts"],"names":[],"mappings":"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","sourcesContent":["import mixins from '../util/mixins'\n\nimport { provide as RegistrableProvide } from './registrable'\nimport { consoleWarn } from '../util/console'\n\nimport { VBtn } from '../components/VBtn/VBtn'\n\nexport default mixins(RegistrableProvide('buttonGroup')).extend({\n  name: 'button-group',\n\n  props: {\n    mandatory: Boolean\n  },\n\n  data: () => ({\n    buttons: [] as VBtn[],\n    listeners: [] as (() => void)[],\n    isDestroying: false\n  }),\n\n  watch: {\n    buttons: 'update'\n  },\n\n  methods: {\n    /** @abstract */\n    isSelected (i: number): boolean {\n      throw new Error('Not implemented !')\n    },\n    /** @abstract */\n    updateValue (i: number): void {\n      throw new Error('Not implemented !')\n    },\n    /** @abstract */\n    updateAllValues (): void {\n      throw new Error('Not implemented !')\n    },\n    getValue (i: number): any {\n      if (this.buttons[i].value != null) {\n        return this.buttons[i].value\n      }\n\n      return i\n    },\n    update () {\n      const selected = []\n\n      for (let i = 0; i < this.buttons.length; i++) {\n        const elm = this.buttons[i].$el\n        const button = this.buttons[i]\n\n        elm.removeAttribute('data-only-child')\n\n        if (this.isSelected(i)) {\n          !button.to && (button.isActive = true)\n          selected.push(i)\n        } else {\n          !button.to && (button.isActive = false)\n        }\n      }\n\n      if (selected.length === 1) {\n        this.buttons[selected[0]].$el.setAttribute('data-only-child', 'true')\n      }\n\n      this.ensureMandatoryInvariant(selected.length > 0)\n    },\n    register (button: VBtn): void {\n      const index = this.buttons.length\n      this.buttons.push(button)\n      this.listeners.push(this.updateValue.bind(this, index))\n      button.$on('click', this.listeners[index])\n    },\n    unregister (buttonToUnregister: VBtn): void {\n      // Basic cleanup if we're destroying\n      if (this.isDestroying) {\n        const index = this.buttons.indexOf(buttonToUnregister)\n        if (index !== -1) {\n          buttonToUnregister.$off('click', this.listeners[index])\n        }\n        return\n      }\n\n      this.redoRegistrations(buttonToUnregister)\n    },\n    redoRegistrations (buttonToUnregister: VBtn): void {\n      let selectedCount = 0\n\n      const buttons = []\n      for (let index = 0; index < this.buttons.length; ++index) {\n        const button = this.buttons[index]\n        if (button !== buttonToUnregister) {\n          buttons.push(button)\n          selectedCount += Number(this.isSelected(index))\n        }\n\n        button.$off('click', this.listeners[index])\n      }\n\n      this.buttons = []\n      this.listeners = []\n\n      for (let index = 0; index < buttons.length; ++index) {\n        this.register(buttons[index])\n      }\n\n      this.ensureMandatoryInvariant(selectedCount > 0)\n      this.updateAllValues && this.updateAllValues()\n    },\n    ensureMandatoryInvariant (hasSelectedAlready: boolean): void {\n      // Preserve the mandatory invariant by selecting the first tracked button, if needed\n\n      if (!this.mandatory || hasSelectedAlready) return\n\n      if (!this.listeners.length) {\n        consoleWarn('There must be at least one v-btn child if the mandatory property is true.', this)\n        return\n      }\n\n      this.listeners[0]()\n    }\n  },\n\n  mounted () {\n    this.update()\n  },\n\n  beforeDestroy () {\n    this.isDestroying = true\n  }\n})\n"]}