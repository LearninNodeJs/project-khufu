{"version":3,"file":"stackable.js","sourceRoot":"","sources":["../../src/mixins/stackable.js"],"names":[],"mappings":";;;;;;AAAA,AAAO,AAAE,AAAS,AAAE,AAAM,AAAiB,AAE3C;;;;;AACE,AAAI,UAAE,AAAW;AAEjB,AAAI;AACF;AACE,AAAS,uBAAE,AAAI;AACf,AAAU,wBAAE,AAAY;AACxB,AAAY,0BAAE,AAAI;AAClB,AAAY,0BAAE,AAAI;AAClB,AAAc,4BAAE,AAAC,AAClB,AACH;AAPS;AAOR;;AACD,AAAQ;AACN,AAIG;;;;;AACH,AAAY;AACV,gBAAI,OAAO,AAAM,WAAK,AAAW,aAAE,OAAO,AAAC;AAE3C,gBAAM,AAAO,UAAG,AAAI,KAAC,AAAY,gBAAI,AAAI,KAAC,AAAK,MAAC,AAAO;AACvD,AAAsC;AAEtC,gBAAM,AAAK,QAAG,CAAC,AAAI,KAAC,AAAQ,AAC1B,AAAC,WAAC,AAAS,wBAAC,AAAO,AAAC,AACpB,AAAC,WAAC,AAAI,KAAC,AAAY,aAAC,AAAI,KAAC,AAAY,gBAAI,CAAC,AAAO,AAAC,AAAC,YAAG,AAAC;AAEzD,gBAAI,AAAK,SAAI,AAAI,MAAE,OAAO,AAAK;AAE/B,AAAkD;AAClD,AAAoD;AACpD,mBAAO,AAAQ,SAAC,AAAK,AAAC,AACxB;AAAC,AACF;AAtBS;AAuBV,AAAO;AACL,AAAY;gBAAE,AAAO,8EAAG,AAAE;;AACxB,gBAAM,AAAI,OAAG,AAAI,KAAC,AAAS,aAAI,AAAI,KAAC,AAAG;AACvC,AAAkD;AAClD,AAAiD;AACjD,gBAAM,AAAG,MAAG,CAAC,AAAI,KAAC,AAAc,gBAAE,AAAS,wBAAC,AAAI,AAAC,AAAC;AAClD,AAAsC;AACtC,AAA2C;AAC3C,AAAmD;AACnD,gBAAM,AAAc,AAAG,AAAC,8CAAG,AAAQ,SAAC,AAAsB,uBAAC,AAAI,KAAC,AAAU,AAAC,AAAC;AAE5E,AAAqC;AACrC,iBAAK,IAAI,AAAK,QAAG,AAAC,GAAE,AAAK,QAAG,AAAc,eAAC,AAAM,QAAE,AAAK,AAAE,SAAE;AAC1D,oBAAI,CAAC,AAAO,QAAC,AAAQ,SAAC,AAAc,eAAC,AAAK,AAAC,AAAC,SAAE;AAC5C,AAAG,wBAAC,AAAI,KAAC,AAAS,wBAAC,AAAc,eAAC,AAAK,AAAC,AAAC,AAAC;AAC3C;AACF;AAED,mBAAO,AAAI,KAAC,AAAG,AAAC,gBAAG,AAAG,AAAC,AACzB;AAAC,AACF,AACF;AArBU;AAnCI","sourcesContent":["import { getZIndex } from '../util/helpers'\n\nexport default {\n  name: 'stackable',\n\n  data () {\n    return {\n      stackBase: null,\n      stackClass: 'unpecified',\n      stackElement: null,\n      stackExclude: null,\n      stackMinZIndex: 0\n    }\n  },\n  computed: {\n    /**\n     * Currently active z-index\n     *\n     * @return {number}\n     */\n    activeZIndex () {\n      if (typeof window === 'undefined') return 0\n\n      const content = this.stackElement || this.$refs.content\n      // Return current zindex if not active\n\n      const index = !this.isActive\n        ? getZIndex(content)\n        : this.getMaxZIndex(this.stackExclude || [content]) + 2\n\n      if (index == null) return index\n\n      // Return max current z-index (excluding self) + 2\n      // (2 to leave room for an overlay below, if needed)\n      return parseInt(index)\n    }\n  },\n  methods: {\n    getMaxZIndex (exclude = []) {\n      const base = this.stackBase || this.$el\n      // Start with lowest allowed z-index or z-index of\n      // base component's element, whichever is greater\n      const zis = [this.stackMinZIndex, getZIndex(base)]\n      // Convert the NodeList to an array to\n      // prevent an Edge bug with Symbol.iterator\n      // https://github.com/vuetifyjs/vuetify/issues/2146\n      const activeElements = [...document.getElementsByClassName(this.stackClass)]\n\n      // Get z-index for all active dialogs\n      for (let index = 0; index < activeElements.length; index++) {\n        if (!exclude.includes(activeElements[index])) {\n          zis.push(getZIndex(activeElements[index]))\n        }\n      }\n\n      return Math.max(...zis)\n    }\n  }\n}\n"]}