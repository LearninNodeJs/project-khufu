{"version":3,"file":"VParallax.js","sourceRoot":"","sources":["../../../src/components/VParallax/VParallax.js"],"names":[],"mappings":";;;;;;AAAA,AAAO,AAAwC;;AAE/C,AAAO,AAAY,AAAM,AAA2B,AAEpD;;;;;;;AACE,AAAI,UAAE,AAAY;AAElB,AAAM,YAAE,AAAC,AAAY,AAAC;AAEtB,AAAI;AACF;AACE,AAAQ,sBAAE,AAAK,AAChB,AACH;AAHS;AAGR;;AAED,AAAK;AACH,AAAG,aAAE,AAAM;AACX,AAAM;AACJ,AAAI,kBAAE,CAAC,AAAM,QAAE,AAAM,AAAC;AACtB,AAAO,qBAAE,AAAG,AACb;AAHO;AAIR,AAAG,aAAE,AAAM,AACZ;AAPM;AASP,AAAQ;AACN,AAAM;AACJ;AACE,AAAO,yBAAE,AAAO;AAChB,AAAO,yBAAE,AAAI,KAAC,AAAQ,AAAC,AAAC,WAAC,AAAC,AAAC,AAAC,IAAC,AAAC;AAC9B,AAAS,AAAE,gDAAmB,AAAI,KAAC,AAAQ,AAAK,AACjD,AACH;AALS;AAKR,AACF;AARS;AAUV,AAAK;AACH,AAAQ;AACN,AAAI,iBAAC,AAAQ,WAAG,AAAI,AACtB;AAAC,AACF;AAJM;AAMP,AAAO;AACL,AAAI,aAAC,AAAI,AAAE,AACb;AAAC;;AAED,AAAO;AACL,AAAI;;;AACF,gBAAI,CAAC,AAAI,KAAC,AAAK,MAAC,AAAG,KAAE,AAAM;AAE3B,gBAAI,AAAI,KAAC,AAAK,MAAC,AAAG,IAAC,AAAQ,UAAE;AAC3B,AAAI,qBAAC,AAAS,AAAE;AAChB,AAAI,qBAAC,AAAS,AAAE;AACjB,mBAAM;AACL,AAAI,qBAAC,AAAK,MAAC,AAAG,IAAC,AAAgB,iBAAC,AAAM,QAAE,AAAG,AAAE;AAC3C,AAAI,0BAAC,AAAS,AAAE;AAChB,AAAI,0BAAC,AAAS,AAAE,AAClB;AAAC,mBAAE,AAAK,AAAC;AACV,AACH;AAAC;AACD,AAAS;AACP,mBAAO,AAAI,KAAC,AAAK,MAAC,AAAG,IAAC,AAAa,AACrC;AAAC;AACD,AAAW;AACT,mBAAO,AAAI,KAAC,AAAG,IAAC,AAAS,AAC3B;AAAC,AACF;AApBQ;AAsBT,AAAM,4BAAE,AAAC;AACP,YAAM,AAAO;AACX,AAAW,yBAAE,AAAmB;AAChC,AAAK,mBAAE,AAAI,KAAC,AAAM;AAClB,AAAK;AACH,AAAG,qBAAE,AAAI,KAAC,AAAG,AACd;AAFM;AAGP,AAAG,iBAAE,AAAK,AACX;AAPe;AAShB,YAAI,AAAI,KAAC,AAAG,KAAE,AAAO,QAAC,AAAK,MAAC,AAAG,MAAG,AAAI,KAAC,AAAG;AAE1C,YAAM,AAAS,cAAK,AAAK;AACvB,AAAW,yBAAE,AAA6B,AAC3C;AAF0B,SAAT,AAAC,EAEhB,CACD,AAAC,EAAC,AAAK,OAAE,AAAO,AAAC,AAClB,AAAC;AAEF,YAAM,AAAO,YAAK,AAAK;AACrB,AAAW,yBAAE,AAAqB,AACnC;AAFwB,SAAT,AAAC,EAEd,AAAI,KAAC,AAAM,OAAC,AAAO,AAAC;AAEvB,iBAAS,AAAK;AACZ,AAAW,yBAAE,AAAY;AACzB,AAAK;AACH,AAAM,AAAE,wBAAG,AAAI,KAAC,AAAgB,AAAI,AACrC;AAFM;AAGP,AAAE,gBAAE,AAAI,KAAC,AAAU,AACpB;AANe,SAAT,AAAC,EAML,CAAC,AAAS,WAAE,AAAO,AAAC,AAAC,AAC1B;AAAC,AACF;AA5Fc","sourcesContent":["import '../../stylus/components/_parallax.styl'\n\nimport Translatable from '../../mixins/translatable'\n\nexport default {\n  name: 'v-parallax',\n\n  mixins: [Translatable],\n\n  data () {\n    return {\n      isBooted: false\n    }\n  },\n\n  props: {\n    alt: String,\n    height: {\n      type: [String, Number],\n      default: 500\n    },\n    src: String\n  },\n\n  computed: {\n    styles () {\n      return {\n        display: 'block',\n        opacity: this.isBooted ? 1 : 0,\n        transform: `translate(-50%, ${this.parallax}px)`\n      }\n    }\n  },\n\n  watch: {\n    parallax () {\n      this.isBooted = true\n    }\n  },\n\n  mounted () {\n    this.init()\n  },\n\n  methods: {\n    init () {\n      if (!this.$refs.img) return\n\n      if (this.$refs.img.complete) {\n        this.translate()\n        this.listeners()\n      } else {\n        this.$refs.img.addEventListener('load', () => {\n          this.translate()\n          this.listeners()\n        }, false)\n      }\n    },\n    objHeight () {\n      return this.$refs.img.naturalHeight\n    },\n    elOffsetTop () {\n      return this.$el.offsetTop\n    }\n  },\n\n  render (h) {\n    const imgData = {\n      staticClass: 'v-parallax__image',\n      style: this.styles,\n      attrs: {\n        src: this.src\n      },\n      ref: 'img'\n    }\n\n    if (this.alt) imgData.attrs.alt = this.alt\n\n    const container = h('div', {\n      staticClass: 'v-parallax__image-container'\n    }, [\n      h('img', imgData)\n    ])\n\n    const content = h('div', {\n      staticClass: 'v-parallax__content'\n    }, this.$slots.default)\n\n    return h('div', {\n      staticClass: 'v-parallax',\n      style: {\n        height: `${this.normalizedHeight}px`\n      },\n      on: this.$listeners\n    }, [container, content])\n  }\n}\n"]}