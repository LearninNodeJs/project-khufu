{"version":3,"file":"tabs-touch.js","sourceRoot":"","sources":["../../../../src/components/VTabs/mixins/tabs-touch.js"],"names":[],"mappings":";;;;;AAAA,AAIG,AACH;;;;;;AACE,AAAO;AACL,AAAS,sCAAE,AAAS;AAClB,gBAAM,AAAW,cAAG,AAAI,KAAC,AAAK,MAAC,AAAO,QAAC,AAAW;AAElD,gBAAI,AAAS,cAAK,AAAM,QAAE;AACxB,uBAAO,AAAI,KAAC,AAAG,IAAC,AAAI,KAAC,AAAY,eAAG,AAAW,aAAE,AAAC,AAAC;AACpD,mBAAM;AACL,uBAAO,AAAI,KAAC,AAAG,IAAC,AAAI,KAAC,AAAY,eAAG,AAAW,aAAE,AAAI,KAAC,AAAK,MAAC,AAAS,UAAC,AAAW,cAAG,AAAW,AAAC;AACjG,AACH;AAAC;AACD,AAAY,4CAAE,AAAC;AACb,AAAI,iBAAC,AAAM,SAAG,AAAI,KAAC,AAAY,eAAG,AAAC,EAAC,AAAW;AAC/C,AAAI,iBAAC,AAAK,MAAC,AAAS,UAAC,AAAK,MAAC,AAAU,aAAG,AAAM;AAC9C,AAAI,iBAAC,AAAK,MAAC,AAAS,UAAC,AAAK,MAAC,AAAU,aAAG,AAAW,AACrD;AAAC;AACD,AAAW,0CAAE,AAAC;AACZ,AAAI,iBAAC,AAAY,eAAG,AAAI,KAAC,AAAM,SAAG,AAAC,EAAC,AAAU,AAChD;AAAC;AACD,AAAU;AACR,gBAAM,AAAS,YAAG,AAAI,KAAC,AAAK,MAAC,AAAS;AACtC,gBAAM,AAAO,UAAG,AAAI,KAAC,AAAK,MAAC,AAAO;AAClC,gBAAM,AAAe,kBAAG,AAAS,UAAC,AAAW,cAAG,AAAO,QAAC,AAAW;AACnE,AAAS,sBAAC,AAAK,MAAC,AAAU,aAAG,AAAI;AACjC,AAAS,sBAAC,AAAK,MAAC,AAAU,aAAG,AAAI;AAEjC,AAA0B;AAC1B,gBAAI,AAAI,KAAC,AAAY,eAAG,AAAC,KAAI,CAAC,AAAI,KAAC,AAAa,eAAE;AAChD,AAAI,qBAAC,AAAY,eAAG,AAAC;AACtB,mBAAM,IAAI,AAAI,KAAC,AAAY,gBAAI,AAAe,iBAAE;AAC/C,AAAI,qBAAC,AAAY,eAAG,AAAe;AACpC,AACH;AAAC,AACF,AACF;AAjCU;AADI","sourcesContent":["/**\n * Tabs touch\n *\n * @mixin\n */\nexport default {\n  methods: {\n    newOffset (direction) {\n      const clientWidth = this.$refs.wrapper.clientWidth\n\n      if (direction === 'prev') {\n        return Math.max(this.scrollOffset - clientWidth, 0)\n      } else {\n        return Math.min(this.scrollOffset + clientWidth, this.$refs.container.clientWidth - clientWidth)\n      }\n    },\n    onTouchStart (e) {\n      this.startX = this.scrollOffset + e.touchstartX\n      this.$refs.container.style.transition = 'none'\n      this.$refs.container.style.willChange = 'transform'\n    },\n    onTouchMove (e) {\n      this.scrollOffset = this.startX - e.touchmoveX\n    },\n    onTouchEnd () {\n      const container = this.$refs.container\n      const wrapper = this.$refs.wrapper\n      const maxScrollOffset = container.clientWidth - wrapper.clientWidth\n      container.style.transition = null\n      container.style.willChange = null\n\n      /* istanbul ignore else */\n      if (this.scrollOffset < 0 || !this.isOverflowing) {\n        this.scrollOffset = 0\n      } else if (this.scrollOffset >= maxScrollOffset) {\n        this.scrollOffset = maxScrollOffset\n      }\n    }\n  }\n}\n"]}