{"version":3,"file":"tabs-computed.js","sourceRoot":"","sources":["../../../../src/components/VTabs/mixins/tabs-computed.js"],"names":[],"mappings":";;;;;AAAA,AAIG,AACH;;;;;;AACE,AAAQ;AACN,AAAW;;;AACT,wBAAY,AAAI,KAAC,AAAS,UAAC,UAAC,AAAG,KAAE,AAAK,AAAE,AAAE;AACxC,oBAAM,AAAE,KAAG,AAAG,IAAC,AAAM,WAAK,AAAG,AAAC,AAAC,MAAC,AAAK,MAAC,AAAQ,AAAE,AAAC,AAAC,aAAC,AAAG,IAAC,AAAM;AAC7D,uBAAO,AAAE,OAAK,AAAI,MAAC,AAAS,AAC9B;AAAC,AAAC,AACJ,aAJS,AAAI;AAIZ;AACD,AAAS;AACP,gBAAI,CAAC,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,OAAO,AAAS;AAEvC,mBAAO,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAW,AAAC,AACpC;AAAC;AACD,AAAe;AACb,wBAAY,AAAM,AAAC,AAAC;AAClB,AAAM,AAAE,wBAAG,AAAQ,SAAC,AAAI,KAAC,AAAM,QAAE,AAAE,AAAC,AAAI,AACzC,AAAC,AAAC;AAFkB,aAAd,AAAI,GAEP,AAAI,AACV;AAAC;AACD,AAAS;AACP,mBAAO,CAAC,AAAI,KAAC,AAAU,cAAI,CAAC,AAAI,KAAC,AAAQ,AAAC,aAAI,AAAI,KAAC,AAAa,AAClE;AAAC;;AACD,AAAU;AACR,AAAG;AACD,uBAAO,AAAI,KAAC,AAAS,AACvB;AAAC;AACD,AAAG,8BAAE,AAAG;AACN,AAAqB;AACrB,AAAG,sBAAG,AAAG,IAAC,AAAQ,AAAE;AAEpB,AAAI,qBAAC,AAAS,YAAG,AAAG;AACpB,AAAI,qBAAC,AAAK,MAAC,AAAO,SAAE,AAAG,AAAC,AAC1B;AAAC,AACF;AAXW;AAYZ,AAAQ;AACN,mBAAO,AAAI,KAAC,AAAQ,SAAC,AAAU,WAAC,AAAK,QAAG,AAAI,KAAC,AAAgB,AAC/D;AAAC;AACD,AAAY;AACV;AACE,AAAI,AAAE,sBAAG,AAAI,KAAC,AAAU,AAAI;AAC5B,AAAU,4BAAE,AAAI,KAAC,AAAU,cAAI,AAAI,AAAC,AAAC,OAAC,AAAI,AAAC,AAAC,OAAC,AAAM;AACnD,AAAK,AAAE,uBAAG,AAAI,KAAC,AAAW,AAAI,AAC/B,AACH;AALS;AAKR;AACD,AAAM;AACJ,mBAAO,AAAI,KAAC,AAAS,AACnB,AAAC,YAAC,AAAI,KAAC,AAAS,UAAC,AAAM,AACvB,AAAC,SAAC,AAAI,AACV;AAAC,AACF,AACF;AAhDW;AADG","sourcesContent":["/**\n * Tabs computed\n *\n * @mixin\n */\nexport default {\n  computed: {\n    activeIndex () {\n      return this.tabs.findIndex((tab, index) => {\n        const id = tab.action === tab ? index.toString() : tab.action\n        return id === this.lazyValue\n      })\n    },\n    activeTab () {\n      if (!this.tabs.length) return undefined\n\n      return this.tabs[this.activeIndex]\n    },\n    containerStyles () {\n      return this.height ? {\n        height: `${parseInt(this.height, 10)}px`\n      } : null\n    },\n    hasArrows () {\n      return (this.showArrows || !this.isMobile) && this.isOverflowing\n    },\n    inputValue: {\n      get () {\n        return this.lazyValue\n      },\n      set (val) {\n        // Always use strings\n        val = val.toString()\n\n        this.lazyValue = val\n        this.$emit('input', val)\n      }\n    },\n    isMobile () {\n      return this.$vuetify.breakpoint.width < this.mobileBreakPoint\n    },\n    sliderStyles () {\n      return {\n        left: `${this.sliderLeft}px`,\n        transition: this.sliderLeft != null ? null : 'none',\n        width: `${this.sliderWidth}px`\n      }\n    },\n    target () {\n      return this.activeTab\n        ? this.activeTab.action\n        : null\n    }\n  }\n}\n"]}