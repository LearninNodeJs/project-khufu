{"version":3,"file":"menu-keyable.js","sourceRoot":"","sources":["../../../../src/components/VMenu/mixins/menu-keyable.js"],"names":[],"mappings":";;;;;;AAWA,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAuB,AAEhD;;;AACE,AAAI;AAAE,AAAG,AAAE,AAAC;AACV,AAAS,uBAAE,CAAC,AAAC;AACb,AAAK,mBAAE,AAAE,AACV,AAAC;AAHW;;AAKb,AAAK;AACH,AAAQ,oCAAE,AAAG;AACX,gBAAI,CAAC,AAAG,KAAE,AAAI,KAAC,AAAS,YAAG,CAAC,AAAC,AAC/B;AAAC;AACD,AAAS,sCAAE,AAAI,MAAE,AAAI;AACnB,gBAAI,AAAI,QAAI,AAAI,KAAC,AAAK,OAAE;AACtB,oBAAM,AAAI,OAAG,AAAI,KAAC,AAAK,MAAC,AAAI,AAAC;AAC7B,AAAI,qBAAC,AAAS,UAAC,AAAG,IAAC,AAA2B,AAAC;AAC/C,AAAI,qBAAC,AAAK,MAAC,AAAO,QAAC,AAAS,YAAG,AAAI,KAAC,AAAS,YAAG,AAAI,KAAC,AAAY;AAClE;AAED,AAAI,oBAAI,AAAI,KAAC,AAAK,SAChB,AAAI,KAAC,AAAK,MAAC,AAAI,AAAC,MAAC,AAAS,UAAC,AAAM,OAAC,AAA2B,AAAC,AAClE;AAAC,AACF;AAdM;AAgBP,AAAO;AACL,AAAe,kDAAE,AAAC;AAChB,gBAAI,CACF,AAAQ,kBAAC,AAAI,MACb,AAAQ,kBAAC,AAAE,IACX,AAAQ,kBAAC,AAAK,AACf,OAAC,AAAQ,SAAC,AAAC,EAAC,AAAO,AAAC,UACnB,AAAC,EAAC,AAAe,AAAE;AAErB,gBAAI,CAAC,AAAQ,kBAAC,AAAG,KAAE,AAAQ,kBAAC,AAAG,AAAC,KAAC,AAAQ,SAAC,AAAC,EAAC,AAAO,AAAC,UAAE;AACpD,uBAAO,AAAI,KAAC,AAAQ,WAAG,AAAK;AAC7B;AAED,AAA6D;AAC7D,AAAI,iBAAC,AAAQ,AAAE;AAEf,gBAAI,AAAC,EAAC,AAAO,YAAK,AAAQ,kBAAC,AAAI,QAAI,AAAI,KAAC,AAAS,YAAG,AAAI,KAAC,AAAK,MAAC,AAAM,SAAG,AAAC,GAAE;AACzE,AAAI,qBAAC,AAAS,AAAE;AAChB,AAAuC;AACvC,AAAsC;AACvC,uBAAU,AAAC,EAAC,AAAO,YAAK,AAAQ,kBAAC,AAAE,MAAI,AAAI,KAAC,AAAS,YAAG,CAAC,AAAC,GAAE;AAC3D,AAAI,qBAAC,AAAS,AAAE;AACjB,aAFM,MAEA,IAAI,AAAC,EAAC,AAAO,YAAK,AAAQ,kBAAC,AAAK,SAAI,AAAI,KAAC,AAAS,cAAK,CAAC,AAAC,GAAE;AAChE,AAAI,qBAAC,AAAK,MAAC,AAAI,KAAC,AAAS,AAAC,WAAC,AAAK,AAAE;AACnC,AACH;AAAC;AACD,AAAQ;AACN,AAAI,iBAAC,AAAK,QAAG,AAAI,KAAC,AAAK,MAAC,AAAO,QAAC,AAAgB,iBAAC,AAAe,AAAC,AACnE;AAAC,AACF,AACF;AA9BU;AAtBI,GAbf,AAQG;;;;;;;;;AAEH,AAAQ","sourcesContent":["/**\n * Menu keyable\n *\n * @mixin\n *\n * Primarily used to support VSelect\n * Handles opening and closing of VMenu from keystrokes\n * Will conditionally highlight VListTiles for VSelect\n */\n\n// Utils\nimport { keyCodes } from '../../../util/helpers'\n\nexport default {\n  data: () => ({\n    listIndex: -1,\n    tiles: []\n  }),\n\n  watch: {\n    isActive (val) {\n      if (!val) this.listIndex = -1\n    },\n    listIndex (next, prev) {\n      if (next in this.tiles) {\n        const tile = this.tiles[next]\n        tile.classList.add('v-list__tile--highlighted')\n        this.$refs.content.scrollTop = tile.offsetTop - tile.clientHeight\n      }\n\n      prev in this.tiles &&\n        this.tiles[prev].classList.remove('v-list__tile--highlighted')\n    }\n  },\n\n  methods: {\n    changeListIndex (e) {\n      if ([\n        keyCodes.down,\n        keyCodes.up,\n        keyCodes.enter\n      ].includes(e.keyCode)\n      ) e.stopPropagation()\n\n      if ([keyCodes.esc, keyCodes.tab].includes(e.keyCode)) {\n        return this.isActive = false\n      }\n\n      // For infinite scroll and autocomplete, re-evaluate children\n      this.getTiles()\n\n      if (e.keyCode === keyCodes.down && this.listIndex < this.tiles.length - 1) {\n        this.listIndex++\n        // Allow user to set listIndex to -1 so\n        // that the list can be un-highlighted\n      } else if (e.keyCode === keyCodes.up && this.listIndex > -1) {\n        this.listIndex--\n      } else if (e.keyCode === keyCodes.enter && this.listIndex !== -1) {\n        this.tiles[this.listIndex].click()\n      }\n    },\n    getTiles () {\n      this.tiles = this.$refs.content.querySelectorAll('.v-list__tile')\n    }\n  }\n}\n"]}