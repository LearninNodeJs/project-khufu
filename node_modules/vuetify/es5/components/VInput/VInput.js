'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Styles

// Components

// Mixins

// Utilities


require('../../../src/stylus/components/_inputs.styl');

var _VIcon = require('../VIcon');

var _VIcon2 = _interopRequireDefault(_VIcon);

var _VMessages = require('../VMessages');

var _VMessages2 = _interopRequireDefault(_VMessages);

var _loadable = require('../../mixins/loadable');

var _loadable2 = _interopRequireDefault(_loadable);

var _themeable = require('../../mixins/themeable');

var _themeable2 = _interopRequireDefault(_themeable);

var _validatable = require('../../mixins/validatable');

var _validatable2 = _interopRequireDefault(_validatable);

var _helpers = require('../../util/helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    name: 'v-input',
    mixins: [_loadable2.default, _themeable2.default, _validatable2.default],
    data: function data(vm) {
        return {
            lazyValue: vm.value,
            isFocused: false
        };
    },
    props: {
        appendIcon: String,
        appendIconCb: Function,
        disabled: Boolean,
        height: [Number, String],
        hideDetails: Boolean,
        hint: String,
        persistentHint: Boolean,
        prependIcon: String,
        prependIconCb: Function,
        readonly: Boolean,
        tabindex: { default: 0 },
        value: { required: false }
    },
    computed: {
        classesInput: function classesInput() {
            return _extends({}, this.classes, {
                'v-input--has-state': this.hasState,
                'v-input--hide-details': this.hideDetails,
                'v-input--is-label-active': this.isLabelActive,
                'v-input--is-dirty': this.isDirty,
                'v-input--is-disabled': this.isDisabled,
                'v-input--is-focused': this.isFocused,
                'v-input--is-loading': this.loading !== false,
                'v-input--is-readonly': this.readonly
            }, this.addTextColorClassChecks({}, this.validationState), this.themeClasses);
        },
        directivesInput: function directivesInput() {
            return [];
        },
        hasHint: function hasHint() {
            return !this.hasMessages && this.hint && (this.persistentHint || this.isFocused);
        },

        // Proxy for `lazyValue`
        // This allows an input
        // to function without
        // a provided model
        internalValue: {
            get: function get() {
                return this.lazyValue;
            },
            set: function set(val) {
                this.lazyValue = val;
                this.$emit('input', val);
            }
        },
        isDirty: function isDirty() {
            return !!this.lazyValue;
        },
        isDisabled: function isDisabled() {
            return this.disabled || this.readonly;
        },
        isLabelActive: function isLabelActive() {
            return this.isDirty;
        }
    },
    watch: {
        value: function value(val) {
            this.lazyValue = val;
        }
    },
    methods: {
        genContent: function genContent() {
            return this.$createElement('div', {
                staticClass: 'v-input__control'
            }, [this.genInputSlot(), this.genMessages()]);
        },
        genDefaultSlot: function genDefaultSlot() {
            return this.$slots.default;
        },
        genIcon: function genIcon(type, cb) {
            var icon = this[type + 'Icon'];
            cb = cb || this[type + 'IconCb'];
            var data = {
                props: {
                    color: this.validationState,
                    disabled: this.disabled
                },
                on: !cb ? null : {
                    click: function click(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        cb(e);
                    }
                }
            };
            return this.$createElement('div', {
                staticClass: 'v-input__icon v-input__icon--' + (0, _helpers.kebabCase)(type),
                key: '' + type + icon
            }, [this.$createElement(_VIcon2.default, data, icon)]);
        },
        genInputSlot: function genInputSlot() {
            return this.$createElement('div', {
                staticClass: 'v-input__slot',
                style: { height: (0, _helpers.convertToUnit)(this.height) },
                directives: this.directivesInput,
                on: { click: this.onClick },
                ref: 'input-slot'
            }, [this.genDefaultSlot(), this.genProgress()]);
        },
        genMessages: function genMessages() {
            if (this.hideDetails) return null;
            var messages = this.hasHint ? [this.hint] : this.validations;
            return this.$createElement(_VMessages2.default, {
                props: {
                    color: this.hasHint ? '' : this.validationState,
                    value: this.hasMessages || this.hasHint ? messages : []
                }
            });
        },
        genSlot: function genSlot(type, location, slot) {
            if (!slot.length) return null;
            var ref = type + '-' + location;
            return this.$createElement('div', {
                staticClass: 'v-input__' + ref,
                ref: ref
            }, slot);
        },
        genPrependSlot: function genPrependSlot() {
            var slot = [];
            // Backwards compat
            // TODO: Deprecate prepend-icon slot 2.0
            if (this.$slots['prepend-icon']) {
                slot.push(this.$slots['prepend-icon']);
            } else if (this.$slots['prepend']) {
                slot.push(this.$slots['prepend']);
            } else if (this.prependIcon) {
                slot.push(this.genIcon('prepend'));
            }
            return this.genSlot('prepend', 'outer', slot);
        },
        genAppendSlot: function genAppendSlot() {
            var slot = [];
            // Append icon for text field was really
            // an appended inner icon, v-text-field
            // will overwrite this method in order to obtain
            // backwards compat
            if (this.$slots['append']) {
                slot.push(this.$slots['append']);
            } else if (this.$slots['append-icon']) {
                slot.push(this.$slots['append-icon']);
            } else if (this.appendIcon) {
                slot.push(this.genIcon('append'));
            }
            return this.genSlot('append', 'outer', slot);
        },
        onClick: function onClick(e) {
            this.$emit('click', e);
        },
        onMouseDown: function onMouseDown(e) {
            this.$emit('mousedown', e);
        },
        onMouseUp: function onMouseUp(e) {
            this.$emit('mouseup', e);
        }
    },
    render: function render(h) {
        return h('div', {
            staticClass: 'v-input',
            attrs: this.attrsInput,
            'class': this.classesInput,
            on: {
                mousedown: this.onMouseDown,
                mouseup: this.onMouseUp
            }
        }, [this.genPrependSlot(), this.genContent(), this.genAppendSlot()]);
    }
};
//# sourceMappingURL=VInput.js.map