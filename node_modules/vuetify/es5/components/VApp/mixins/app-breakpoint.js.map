{"version":3,"file":"app-breakpoint.js","sourceRoot":"","sources":["../../../../src/components/VApp/mixins/app-breakpoint.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * A modified version of https://gist.github.com/cb109/b074a65f7595cffc21cea59ce8d15f9b\n */\n\n/**\n * A Vue mixin to get the current width/height and the associated breakpoint.\n *\n * Useful to e.g. adapt the user interface from inside a Vue component\n * as opposed to using CSS classes. The breakpoint pixel values and\n * range names are taken from Vuetify (https://github.com/vuetifyjs).\n *\n * Use within a component:\n *\n *   import breakpoint from './breakpoint.js'\n *\n *   export default {\n *     name: 'my-component',\n *     mixins: [breakpoint],\n *     ...\n *\n * Then inside a template:\n *\n *   <div v-if=\"$breakpoint.smAndDown\">...</div>\n */\nconst breakpoint = {\n  data () {\n    return {\n      clientWidth: clientDimensions.getWidth(),\n      clientHeight: clientDimensions.getHeight(),\n      resizeTimeout: null\n    }\n  },\n\n  computed: {\n    breakpoint () {\n      const xs = this.clientWidth < 600\n      const sm = this.clientWidth < 960 && !xs\n      const md = this.clientWidth < (1280 - 16) && !(sm || xs)\n      const lg = this.clientWidth < (1920 - 16) && !(md || sm || xs)\n      const xl = this.clientWidth >= (1920 - 16) && !(lg || md || sm || xs)\n\n      const xsOnly = xs\n      const smOnly = sm\n      const smAndDown = (xs || sm) && !(md || lg || xl)\n      const smAndUp = !xs && (sm || md || lg || xl)\n      const mdOnly = md\n      const mdAndDown = (xs || sm || md) && !(lg || xl)\n      const mdAndUp = !(xs || sm) && (md || lg || xl)\n      const lgOnly = lg\n      const lgAndDown = (xs || sm || md || lg) && !xl\n      const lgAndUp = !(xs || sm || md) && (lg || xl)\n      const xlOnly = xl\n\n      let name\n      switch (true) {\n        case (xs):\n          name = 'xs'\n          break\n        case (sm):\n          name = 'sm'\n          break\n        case (md):\n          name = 'md'\n          break\n        case (lg):\n          name = 'lg'\n          break\n        default:\n          name = 'xl'\n          break\n      }\n\n      const result = {\n        // Definite breakpoint.\n        xs,\n        sm,\n        md,\n        lg,\n        xl,\n\n        // Useful e.g. to construct CSS class names dynamically.\n        name,\n\n        // Breakpoint ranges.\n        xsOnly,\n        smOnly,\n        smAndDown,\n        smAndUp,\n        mdOnly,\n        mdAndDown,\n        mdAndUp,\n        lgOnly,\n        lgAndDown,\n        lgAndUp,\n        xlOnly,\n\n        // For custom breakpoint logic.\n        width: this.clientWidth,\n        height: this.clientHeight\n      }\n\n      return result\n    }\n  },\n\n  watch: {\n    breakpoint (val) {\n      this.$vuetify.breakpoint = val\n    }\n  },\n\n  created () {\n    this.$vuetify.breakpoint = this.breakpoint\n  },\n\n  methods: {\n    onResize () {\n      clearTimeout(this.resizeTimeout)\n\n      // Added debounce to match what\n      // v-resize used to do but was\n      // removed due to a memory leak\n      // https://github.com/vuetifyjs/vuetify/pull/2997\n      this.resizeTimeout = setTimeout(() => {\n        this.clientWidth = clientDimensions.getWidth()\n        this.clientHeight = clientDimensions.getHeight()\n      }, 200)\n    }\n  }\n}\n\n// Cross-browser support as described in:\n// https://stackoverflow.com/questions/1248081\nconst clientDimensions = {\n  getWidth () {\n    if (typeof document === 'undefined') return 0 // SSR\n    return Math.max(\n      document.documentElement.clientWidth,\n      window.innerWidth || 0\n    )\n  },\n  getHeight () {\n    if (typeof document === 'undefined') return 0 // SSR\n    return Math.max(\n      document.documentElement.clientHeight,\n      window.innerHeight || 0\n    )\n  }\n}\n\nexport default breakpoint\n"]}