'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VSelectList = exports.VSelect = undefined;

var _VSelect = require('./VSelect');

var _VSelect2 = _interopRequireDefault(_VSelect);

var _VSelectList = require('./VSelectList');

var _VSelectList2 = _interopRequireDefault(_VSelectList);

var _VOverflowBtn = require('../VOverflowBtn');

var _VOverflowBtn2 = _interopRequireDefault(_VOverflowBtn);

var _VAutocomplete = require('../VAutocomplete');

var _VAutocomplete2 = _interopRequireDefault(_VAutocomplete);

var _rebuildFunctionalSlots = require('../../util/rebuildFunctionalSlots');

var _rebuildFunctionalSlots2 = _interopRequireDefault(_rebuildFunctionalSlots);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var wrapper = {
    functional: true,
    props: {
        // VAutoComplete
        autocomplete: Boolean,
        combobox: Boolean,
        tags: Boolean,
        // VOverflowBtn
        editable: Boolean,
        overflow: Boolean,
        segmented: Boolean
    },
    render: function render(h, _ref) {
        var props = _ref.props,
            data = _ref.data,
            slots = _ref.slots,
            parent = _ref.parent;

        var children = (0, _rebuildFunctionalSlots2.default)(slots(), h);
        if (props.autocomplete) {
            console.warn('[Vuetify] \'<v-select autocomplete>\' is deprecated, use \'<v-autocomplete>\' instead in ' + parent._name);
        }
        if (props.combobox) {
            console.warn('[Vuetify] \'<v-select combobox>\' is deprecated, use \'<v-autocomplete combobox>\' instead in ' + parent._name);
        }
        if (props.tags) {
            console.warn('[Vuetify] \'<v-select tags>\' is deprecated, use \'<v-autocomplete tags>\' instead in ' + parent._name);
        }
        if (props.overflow) {
            console.warn('[Vuetify] \'<v-select overflow>\' is deprecated, use \'<v-overflow-btn>\' instead in ' + parent._name);
        }
        if (props.segmented) {
            console.warn('[Vuetify] \'<v-select segmented>\' is deprecated, use \'<v-overflow-btn segmented>\' instead in ' + parent._name);
        }
        if (props.editable) {
            console.warn('[Vuetify] \'<v-select editable>\' is deprecated, use \'<v-overflow-btn editable>\' instead in ' + parent._name);
        }
        if (props.autocomplete || props.combobox || props.tags) {
            data.attrs.combobox = props.combobox;
            data.attrs.tags = props.tags;
            return h(_VAutocomplete2.default, data, children);
        } else if (props.overflow || props.segmented || props.editable) {
            data.attrs.segmented = props.segmented;
            data.attrs.editable = props.editable;
            return h(_VOverflowBtn2.default, data, children);
        } else {
            return h(_VSelect2.default, data, children);
        }
    }
};
/* istanbul ignore next */
wrapper.install = function install(Vue) {
    Vue.component(_VSelect2.default.name, wrapper);
    Vue.component(_VSelectList2.default.name, _VSelectList2.default);
};
exports.VSelect = wrapper;
exports.VSelectList = _VSelectList2.default;
exports.default = wrapper;
//# sourceMappingURL=index.js.map