{"version":3,"file":"VRadioGroup.js","sourceRoot":"","sources":["../../../src/components/VRadioGroup/VRadioGroup.js"],"names":[],"mappings":"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","sourcesContent":["// Styles\nimport '../../stylus/components/_selection-controls.styl'\nimport '../../stylus/components/_radio-group.styl'\n\n// Components\nimport VInput from '../VInput'\n\n// Mixins\nimport Comparable from '../../mixins/comparable'\nimport {\n  provide as RegistrableProvide\n} from '../../mixins/registrable'\n\nexport default {\n  name: 'v-radio-group',\n\n  extends: VInput,\n\n  mixins: [\n    Comparable,\n    RegistrableProvide('radio')\n  ],\n\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n\n  provide () {\n    return {\n      isMandatory: () => this.mandatory,\n      name: () => this.name,\n      validationState: () => this.validationState\n    }\n  },\n\n  data: () => ({\n    internalTabIndex: -1,\n    radios: []\n  }),\n\n  props: {\n    column: {\n      type: Boolean,\n      default: true\n    },\n    height: {\n      type: [Number, String],\n      default: 'auto'\n    },\n    mandatory: {\n      type: Boolean,\n      default: true\n    },\n    name: String,\n    row: Boolean,\n    // If no value set on VRadio\n    // will match valueComparator\n    // force default to null\n    value: {\n      default: null\n    }\n  },\n\n  watch: {\n    hasError: 'setErrorState',\n    internalValue: 'setActiveRadio'\n  },\n\n  computed: {\n    classes () {\n      return {\n        'v-input--selection-controls v-input--radio-group': true,\n        'v-input--radio-group--column': this.column && !this.row,\n        'v-input--radio-group--row': this.row\n      }\n    }\n  },\n\n  mounted () {\n    this.setErrorState(this.hasError)\n    this.setActiveRadio()\n  },\n\n  methods: {\n    genDefaultSlot () {\n      return [this.genRadioGroup()]\n    },\n    genRadioGroup () {\n      return this.$createElement('div', {\n        staticClass: 'v-input--radio-group__input',\n        attrs: {\n          role: 'radiogroup'\n        }\n      }, this.$slots.default)\n    },\n    onRadioChange (value) {\n      if (this.disabled) return\n\n      this.hasInput = true\n      this.internalValue = value\n      this.$emit('change', value)\n      this.setActiveRadio()\n      this.$nextTick(this.validate)\n    },\n    onRadioBlur (e) {\n      if (!e.relatedTarget || !e.relatedTarget.classList.contains('v-radio')) {\n        this.hasInput = true\n        this.$emit('blur', e)\n      }\n    },\n    register (radio) {\n      radio.isActive = this.valueComparator(this.internalValue, radio.value)\n      radio.$refs.input.tabIndex = radio.$refs.input.tabIndex > 0 ? radio.$refs.input.tabIndex : 0\n      radio.$on('change', this.onRadioChange)\n      radio.$on('blur', this.onRadioBlur)\n      this.radios.push(radio)\n    },\n    setErrorState (val) {\n      for (let index = this.radios.length; --index >= 0;) {\n        this.radios[index].parentError = val\n      }\n    },\n    setActiveRadio () {\n      for (let index = this.radios.length; --index >= 0;) {\n        const radio = this.radios[index]\n        radio.isActive = this.valueComparator(this.internalValue, radio.value)\n      }\n    },\n    unregister (radio) {\n      radio.$off('change', this.onRadioChange)\n      radio.$off('blur', this.onRadioBlur)\n\n      const index = this.radios.findIndex(r => r === radio)\n\n      /* istanbul ignore else */\n      if (index > -1) this.radios.splice(index, 1)\n    }\n  }\n}\n"]}