{"version":3,"file":"VBtnToggle.js","sourceRoot":"","sources":["../../../src/components/VBtnToggle/VBtnToggle.ts"],"names":[],"mappings":"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","sourcesContent":["import '../../stylus/components/_button-toggle.styl'\n\nimport { VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nimport mixins from '../../util/mixins'\n\nimport ButtonGroup from '../../mixins/button-group'\nimport Themeable from '../../mixins/themeable'\nimport { consoleWarn } from '../../util/console'\n\nconst VBtnToggle = mixins(ButtonGroup, Themeable).extend({\n  name: 'v-btn-toggle',\n\n  model: {\n    prop: 'inputValue',\n    event: 'change'\n  },\n\n  props: {\n    inputValue: {\n      required: false\n    } as PropValidator<any>,\n    mandatory: Boolean,\n    multiple: Boolean\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-btn-toggle': true,\n        'v-btn-toggle--selected': this.hasValue,\n        'theme--light': this.light,\n        'theme--dark': this.dark\n      }\n    },\n    hasValue (): boolean {\n      return (this.multiple && this.inputValue.length) ||\n        (!this.multiple && this.inputValue !== null &&\n          typeof this.inputValue !== 'undefined')\n    }\n  },\n\n  watch: {\n    inputValue: {\n      handler () {\n        this.update()\n      },\n      deep: true\n    }\n  },\n\n  methods: {\n    isSelected (i: number): boolean {\n      const item = this.getValue(i)\n      if (!this.multiple) {\n        return this.inputValue === item\n      }\n\n      return this.inputValue.includes(item)\n    },\n    updateValue (i: number): void {\n      const item = this.getValue(i)\n      if (!this.multiple) {\n        if (this.mandatory && this.inputValue === item) return\n        this.$emit('change', this.inputValue === item ? null : item)\n        return\n      }\n\n      const items = this.inputValue.slice()\n\n      const index = items.indexOf(item)\n      if (index > -1) {\n        if (this.mandatory && items.length === 1) return\n        items.length >= 1 && items.splice(index, 1)\n      } else {\n        items.push(item)\n      }\n\n      this.$emit('change', items)\n    },\n    updateAllValues (): void {\n      if (!this.multiple) return\n\n      const items = []\n\n      for (let i = 0; i < this.buttons.length; ++i) {\n        const item = this.getValue(i)\n        const index = this.inputValue.indexOf(item)\n        if (index !== -1) {\n          items.push(item)\n        }\n      }\n\n      this.$emit('change', items)\n    }\n  },\n\n  created () {\n    if (this.multiple && !Array.isArray(this.inputValue)) {\n      consoleWarn('Model must be bound to an array if the multiple property is true.', this)\n    }\n  },\n\n  render (h): VNode {\n    return h('div', { class: this.classes }, this.$slots.default)\n  }\n})\n\n/* eslint-disable-next-line no-redeclare */\nexport type VBtnToggle = InstanceType<typeof VBtnToggle> & {\n  $el: HTMLDivElement\n}\nexport default VBtnToggle\n"]}