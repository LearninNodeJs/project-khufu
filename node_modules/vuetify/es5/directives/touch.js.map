{"version":3,"file":"touch.js","sourceRoot":"","sources":["../../src/directives/touch.js"],"names":[],"mappings":"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","sourcesContent":["const touchstart = (event, wrapper) => {\n  const touch = event.changedTouches[0]\n  wrapper.touchstartX = touch.clientX\n  wrapper.touchstartY = touch.clientY\n\n  wrapper.start &&\n    wrapper.start(Object.assign(event, wrapper))\n}\n\nconst touchend = (event, wrapper) => {\n  const touch = event.changedTouches[0]\n  wrapper.touchendX = touch.clientX\n  wrapper.touchendY = touch.clientY\n\n  wrapper.end &&\n    wrapper.end(Object.assign(event, wrapper))\n\n  handleGesture(wrapper)\n}\n\nconst touchmove = (event, wrapper) => {\n  const touch = event.changedTouches[0]\n  wrapper.touchmoveX = touch.clientX\n  wrapper.touchmoveY = touch.clientY\n\n  wrapper.move && wrapper.move(Object.assign(event, wrapper))\n}\n\nconst handleGesture = wrapper => {\n  const { touchstartX, touchendX, touchstartY, touchendY } = wrapper\n  const dirRatio = 0.5\n  const minDistance = 16\n  wrapper.offsetX = touchendX - touchstartX\n  wrapper.offsetY = touchendY - touchstartY\n\n  if (Math.abs(wrapper.offsetY) < dirRatio * Math.abs(wrapper.offsetX)) {\n    wrapper.left && (touchendX < touchstartX - minDistance) && wrapper.left(wrapper)\n    wrapper.right && (touchendX > touchstartX + minDistance) && wrapper.right(wrapper)\n  }\n\n  if (Math.abs(wrapper.offsetX) < dirRatio * Math.abs(wrapper.offsetY)) {\n    wrapper.up && (touchendY < touchstartY - minDistance) && wrapper.up(wrapper)\n    wrapper.down && (touchendY > touchstartY + minDistance) && wrapper.down(wrapper)\n  }\n}\n\nfunction inserted (el, { value }, { context }) {\n  const wrapper = {\n    touchstartX: 0,\n    touchstartY: 0,\n    touchendX: 0,\n    touchendY: 0,\n    touchmoveX: 0,\n    touchmoveY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    left: value.left,\n    right: value.right,\n    up: value.up,\n    down: value.down,\n    start: value.start,\n    move: value.move,\n    end: value.end\n  }\n\n  const target = value.parent ? el.parentNode : el\n  const options = value.options || { passive: true }\n\n  // Needed to pass unit tests\n  if (!target) return\n\n  const handlers = {\n    touchstart: e => touchstart(e, wrapper),\n    touchend: e => touchend(e, wrapper),\n    touchmove: e => touchmove(e, wrapper)\n  }\n  target._touchHandlers = Object.assign(Object(target._touchHandlers), {\n    [context._uid]: handlers\n  })\n  for (const eventName of Object.keys(handlers)) {\n    target.addEventListener(eventName, handlers[eventName], options)\n  }\n}\n\nfunction unbind (el, { value }, { context }) {\n  const target = value.parent ? el.parentNode : el\n\n  if (!target) return\n\n  const handlers = target._touchHandlers[context._uid]\n  for (const eventName of Object.keys(handlers)) {\n    target.removeEventListener(eventName, handlers[eventName])\n  }\n  delete target._touchHandlers[context._uid]\n}\n\nexport default {\n  name: 'touch',\n  inserted,\n  unbind\n}\n"]}